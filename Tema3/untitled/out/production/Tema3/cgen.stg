sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(intTag, boolTag, stringTag, strConstants, intConstants, boolConstants, classNameTab, classObjectsTab, classPrototypesTab, dispatchTables, heapStartTab, initConstructTab, customMethodsTab) ::= <<
.data
    .align	2
    .globl	class_nameTab
    .globl	Int_protObj
    .globl	String_protObj
    .globl	bool_const0
    .globl	bool_const1
    .globl	Main_protObj
    .globl	_int_tag
    .globl	_string_tag
    .globl	_bool_tag
<intTag>
<stringTag>
<boolTag>

<strConstants>

<intConstants>

<boolConstants>

class_nameTab:
<classNameTab>

class_objTab:
<classObjectsTab>

<classPrototypesTab>

<dispatchTables>

heap_start:
<heapStartTab>

<initConstructTab>

<customMethodsTab>
>>

defaultTag(nameTag, tagId) ::=<<
_<nameTag>_tag:
    .word <tagId>
>>

strConst(count, tagId, size, classNameLength, className) ::= <<
str_const<count>:
    .word   <tagId>
    .word   <size>
    .word   String_dispTab
    .word   <classNameLength>
    .asciiz "<className>"
    .align 2
>>

intConst(count, tagId, defaultValue) ::= <<
int_const<count>:
    .word   <tagId>
    .word   4
    .word   Int_dispTab
    .word   <defaultValue>
>>

boolConst(count, tagId, defaultValue) ::= <<
bool_const<count>:
    .word   <tagId>
    .word   4
    .word   Bool_dispTab
    .word   <defaultValue>
>>

classProtObj(className, tagId, size, attrib) ::= <<
<className>_protObj:
    .word   <tagId>
    .word   <size>
    .word   <className>_dispTab
<attrib>
>>

classDispatchTable(className, methods) ::= <<
<className>_dispTab:
<methods>
>>

methodDeclarationDispatchTable(className, methodName) ::= <<
    .word   <className>.<methodName>

>>

objectDeclarationTab(className) ::= <<
    .word   <className>_protObj
    .word   <className>_init

>>

heapStart(objectInits) ::= <<
    .word   0
    .text
<objectInits>
>>

globalObjectInit(className) ::= <<
    .globl <className>_init

>>

initConstructor(className, parentClassName, attrib) ::= <<
<className>_init:
    addiu	$sp $sp -12
    sw		$fp 12($sp)
    sw		$s0 8($sp)
    sw		$ra 4($sp)
    addiu	$fp $sp 4
    move	$s0 $a0
<if (parentClassName)>
    jal     <parentClassName>_init
<endif>
<attrib>
    move	$a0 $s0
    lw		$fp 12($sp)
    lw		$s0 8($sp)
    lw		$ra 4($sp)
    addiu	$sp $sp 12
    jr		$ra
>>

customMethod(className, methodName, methodBody, incrementStackNumber) ::= <<
<className>.<methodName>:
    addiu	$sp $sp -12
    sw		$fp 12($sp)
    sw		$s0 8($sp)
    sw		$ra 4($sp)
    addiu	$fp $sp 4
    move	$s0 $a0
<methodBody>
    lw		$fp 12($sp)
	lw		$s0 8($sp)
	lw		$ra 4($sp)
	addiu	$sp $sp <incrementStackNumber>
	jr		$ra
>>

literal(addressConstant) ::= <<
    la      $a0 <addressConstant>
>>

