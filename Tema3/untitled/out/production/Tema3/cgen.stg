sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(intTag, boolTag, stringTag, strConstants, intConstants, boolConstants, classNameTab, classObjectsTab, classPrototypesTab, dispatchTables, heapStartTab, initConstructTab, customMethodsTab) ::= <<
.data
    .align	2
    .globl	class_nameTab
    .globl	Int_protObj
    .globl	String_protObj
    .globl	bool_const0
    .globl	bool_const1
    .globl	Main_protObj
    .globl	_int_tag
    .globl	_string_tag
    .globl	_bool_tag
<intTag>
<stringTag>
<boolTag>
<strConstants>
<intConstants>
<boolConstants>
class_nameTab:
<classNameTab>
class_objTab:
<classObjectsTab>
<classPrototypesTab>
<dispatchTables>
    .globl  heap_start
heap_start:
<heapStartTab>
<initConstructTab>
<customMethodsTab>
>>

defaultTag(nameTag, tagId) ::=<<
_<nameTag>_tag:
    .word <tagId>
>>

strConst(count, tagId, size, classNameLength, className) ::= <<
str_const<count>:
    .word   <tagId>
    .word   <size>
    .word   String_dispTab
    .word   <classNameLength>
    .asciiz "<className>"
    .align 2
>>

intConst(count, tagId, defaultValue) ::= <<
int_const<count>:
    .word   <tagId>
    .word   4
    .word   Int_dispTab
    .word   <defaultValue>
>>

boolConst(count, tagId, defaultValue) ::= <<
bool_const<count>:
    .word   <tagId>
    .word   4
    .word   Bool_dispTab
    .word   <defaultValue>
>>

classProtObj(className, tagId, size, attrib) ::= <<
<className>_protObj:
    .word   <tagId>
    .word   <size>
    .word   <className>_dispTab
<attrib>
>>

classDispatchTable(className, methods) ::= <<
<className>_dispTab:
<methods>
>>

methodDeclarationDispatchTable(className, methodName) ::= <<
    .word   <className>.<methodName>

>>

objectDeclarationTab(className) ::= <<
    .word   <className>_protObj
    .word   <className>_init
>>

heapStart(objectInits) ::= <<
    .word   0
    .text
<objectInits>
>>

globalObjectInit(className) ::= <<
    .globl <className>_init

>>

initConstructor(className, parentClassName, attrib) ::= <<
<className>_init:
    addiu	$sp $sp -12
    sw		$fp 12($sp)
    sw		$s0 8($sp)
    sw		$ra 4($sp)
    addiu	$fp $sp 4
    move	$s0 $a0
<if (parentClassName)>
    jal     <parentClassName>_init
<endif>
<attrib>
    move	$a0 $s0
    lw		$fp 12($sp)
    lw		$s0 8($sp)
    lw		$ra 4($sp)
    addiu	$sp $sp 12
    jr		$ra
>>

customMethod(className, methodName, methodBody, incrementStackNumber) ::= <<
<className>.<methodName>:
    addiu	$sp $sp -12
    sw		$fp 12($sp)
    sw		$s0 8($sp)
    sw		$ra 4($sp)
    addiu	$fp $sp 4
    move	$s0 $a0
<methodBody>
    lw		$fp 12($sp)
	lw		$s0 8($sp)
	lw		$ra 4($sp)
	addiu	$sp $sp <incrementStackNumber>
	jr		$ra
>>

literal(addressConstant) ::= <<
    la      $a0 <addressConstant>
>>

dispatchMethod(methodName, args, methodId, parserPath, parserPathLine, offset, caller, static) ::= <<
<args>
<if (caller)>
<caller>
<else>
    move    $a0 $s0
<endif>
    bnez    $a0 dispatch<methodId>      # <methodName>
    la      $a0 <parserPath>
    li      $t1 <parserPathLine>
    jal     _dispatch_abort
dispatch<methodId>:
<if (static)>
    la      $t1  <static>_dispTab
<else>
    lw      $t1 8($a0)
<endif>
    lw      $t1 <offset>($t1)
    jalr    $t1
>>

dispatchArg(arg) ::= <<
<arg>
    sw      $a0 0($sp)
    addiu   $sp $sp -4

>>

loadIdAttributeVar(offset, pointer) ::= <<
    lw      $a0 <offset>($<pointer>)
>>

initAttribute(defaultValue, offset) ::= <<
<defaultValue>
    sw      $a0 <offset>($s0)
>>

storeIdAttributeVar(defaultValue, offset, pointer) ::= <<
<defaultValue>
    sw      $a0 <offset>($<pointer>)
>>

pushStack(offset) ::= <<
    addiu   $sp $sp <offset>
>>

newConstructor(className) ::= <<
    la		$a0 <className>_protObj
    jal		Object.copy
    jal		<className>_init
>>

newSelfTypeConstructor() ::= <<
	la		$t1 class_objTab
	lw		$t2 0($s0)
	sll		$t2 $t2 3
	addu	$t1 $t1 $t2
	sw		$t1 0($sp)
	addiu	$sp $sp -4
	lw		$a0 0($t1)
	jal		Object.copy
	lw		$t1 4($sp)
	addiu	$sp $sp 4
	lw		$t1 4($t1)
	jalr	$t1
>>