sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(intTag, boolTag, stringTag, strConstants, intConstants, classNameTab, classObjectsTab, classPrototypesTab, dispatchTables, heapStartTab) ::= <<
.data
    .align	2
    .globl	class_nameTab
    .globl	Int_protObj
    .globl	String_protObj
    .globl	bool_const_false
    .globl	bool_const_true
    .globl	Main_protObj
    .globl	_int_tag
    .globl	_string_tag
    .globl	_bool_tag
<intTag>
<stringTag>
<boolTag>

<strConstants>

<intConstants>

class_nameTab:
<classNameTab>

class_objTab:
<classObjectsTab>

<classPrototypesTab>

<dispatchTables>

heap_start:
<heapStartTab>
>>

defaultTag(nameTag, tagId) ::=<<
_<nameTag>_tag:
    .word <tagId>
>>

strConst(count, tagId, size, classNameLength, className) ::= <<
str_const<count>:
    .word <tagId>
    .word <size>
    .word String_dispTab
    .word <classNameLength>
    .asciiz "<className>"
    .align 2
>>

intConst(count, tagId, defaultValue) ::= <<
int_const_<count>:
    .word <tagId>
    .word 4
    .word Int_dispTab
    .word <defaultValue>
>>

classProtObj(className, tagId, size, attrib) ::= <<
<className>_protObj:
    .word <tagId>
    .word <size>
    .word <className>_dispTab
<attrib>
>>

classDispatchTable(className, methods) ::= <<
<className>_dispTab:
<methods>
>>

methodDeclarationDispatchTable(className, methodName) ::= <<
    .word   <className>.<methodName>

>>

objectDeclarationTab(className) ::= <<
    .word   <className>_protObj
    .word   <className>_init

>>

heapStart(objectInits) ::= <<
    .word   0
    .text
<objectInits>
>>

globalObjectInit(className) ::= <<
    .globl <className>_init

>>